---
title: "Python Crash Course"
subtitle: "Python Excersises"
date: "2025-09-07"
---

# Python Crash Course - Practice Exercises

Complete these exercises to test your understanding of Python fundamentals. Try to solve them yourself before looking at the solutions.

## Exercise 1: Basic Data Types and Variables

Create variables for the following and print their types: - Your age as an integer - Your height in meters as a float\
- Whether you like Python programming as a boolean - Your favorite programming language as a string

```{python}
# Your code here
```

**Expected output format:**

```         
Age: 25, Type: <class 'int'>
Height: 1.75, Type: <class 'float'>
...
```

## Exercise 2: Arithmetic and Comparison Operations

Calculate and print the results of: 1. What is 2 raised to the power of 10? 2. What is the remainder when 17 is divided by 5? 3. Is 15 greater than 10 AND less than 20? 4. Is 5 equal to 5.0? (Test this comparison)

```{python}
# Your code here
```

## Exercise 3: String Cleaning and Processing

You have a messy email address: `"  STUDENT@UNIVERSITY.EDU  "`

Write code to: 1. Remove the extra spaces 2. Convert it to lowercase 3. Split it into username and domain parts 4. Check if the domain ends with ".edu"

```{python}
email = "  STUDENT@UNIVERSITY.EDU  "
# Your code here
```

**Expected output:**

```         
Clean email: student@university.edu
Username: student
Domain: university.edu
Is .edu domain: True
```

## Exercise 4: Text Analysis with String Methods

Given the sentence: `"The quick brown fox jumps over the lazy dog"`

Write code to: 1. Count how many times the letter "o" appears 2. Replace all instances of "the" with "THE" (case-sensitive) 3. Split the sentence into individual words 4. Create a new sentence with words in reverse order

```{python}
sentence = "The quick brown fox jumps over the lazy dog"
# Your code here
```

## Exercise 5: List Operations and Analysis

You have a list of test scores: `[85, 92, 78, 90, 88, 76, 95, 89]`

Write code to: 1. Add a new score of 94 to the end 2. Remove the lowest score 3. Calculate and print the average score 4. Find how many scores are above 85 5. Sort the scores in descending order

```{python}
scores = [85, 92, 78, 90, 88, 76, 95, 89]
# Your code here
```

## Exercise 6: Dictionary Operations

Create a dictionary representing a student with the following information: - Name: "Alice Johnson" - Age: 20 - Major: "Computer Science" - GPA: 3.7 - Courses: \["Python Programming", "Data Structures", "Calculus"\]

Then: 1. Print the student's name and major 2. Add a new course "Machine Learning" to their course list 3. Update their GPA to 3.8 4. Check if "Statistics" is in their courses

```{python}
# Your code here
```

## Exercise 7: Conditional Logic - Grade Calculator

Write a program that takes a numerical score and converts it to a letter grade: - 90-100: A - 80-89: B - 70-79: C - 60-69: D - Below 60: F

Test it with scores: 95, 87, 72, 65, 45

```{python}
def get_letter_grade(score):
    # Your code here
    pass

# Test with different scores
test_scores = [95, 87, 72, 65, 45]
# Your code here
```

## Exercise 8: Loop Practice - Number Patterns

Write code to: 1. Print all even numbers from 2 to 20 2. Calculate the sum of all numbers from 1 to 100 3. Print the multiplication table for 7 (7x1 through 7x10)

```{python}
# Your code here
```

## Exercise 9: Function Creation - Temperature Converter

Create a function that converts temperatures between Celsius and Fahrenheit.

The function should: - Take two parameters: `temperature` and `scale` - If scale is "C", convert Celsius to Fahrenheit: F = (C Ã— 9/5) + 32 - If scale is "F", convert Fahrenheit to Celsius: C = (F - 32) Ã— 5/9 - Return the converted temperature rounded to 1 decimal place

```{python}
def convert_temperature(temperature, scale):
    # Your code here
    pass

# Test cases
print(convert_temperature(0, "C"))      # Should print 32.0
print(convert_temperature(100, "C"))    # Should print 212.0
print(convert_temperature(32, "F"))     # Should print 0.0
print(convert_temperature(212, "F"))    # Should print 100.0
```

## Exercise 10: Mixed Concepts - Data Processing

You have a list of full names: `["john doe", "JANE SMITH", "  bob johnson  ", "Alice Brown"]`

Write a program that: 1. Cleans each name (removes extra spaces, proper capitalization) 2. Separates first and last names 3. Creates a dictionary where keys are last names and values are first names 4. Prints all last names in alphabetical order

```{python}
names = ["john doe", "JANE SMITH", "  bob johnson  ", "Alice Brown"]
# Your code here
```

**Expected output:**

```         
Brown: Alice
Doe: John
Johnson: Bob
Smith: Jane
```

## Exercise 11: String Parsing Challenge

You have a CSV-like string: `"Alice,25,Engineer,75000|Bob,30,Teacher,45000|Carol,28,Doctor,95000"`

Write code to: 1. Split the string into individual person records 2. For each person, extract their information into a dictionary 3. Find the person with the highest salary 4. Calculate the average age

```{python}
data_string = "Alice,25,Engineer,75000|Bob,30,Teacher,45000|Carol,28,Doctor,95000"
# Your code here
```

## Exercise 12: Algorithm Practice - List Processing

Write a function that takes a list of numbers and returns a new list containing only the numbers that appear exactly once (remove duplicates, but also remove numbers that appear multiple times).

Example: `[1, 2, 3, 2, 4, 5, 4]` should return `[1, 3, 5]`

```{python}
def find_unique_numbers(numbers):
    # Your code here
    pass

# Test cases
test1 = [1, 2, 3, 2, 4, 5, 4]
test2 = [1, 1, 1, 2, 3, 3]
test3 = [1, 2, 3, 4, 5]

print(find_unique_numbers(test1))  # Should print [1, 3, 5]
print(find_unique_numbers(test2))  # Should print [2]
print(find_unique_numbers(test3))  # Should print [1, 2, 3, 4, 5]
```

</details>

------------------------------------------------------------------------

## Assessment Rubric

### Beginner Level (Exercises 1-4)

-   Understanding basic data types and variables
-   String manipulation and cleaning
-   Basic operations and method usage

### Intermediate Level (Exercises 5-8)

-   List operations and data analysis
-   Dictionary creation and manipulation
-   Conditional logic and control flow
-   Loop patterns

### Advanced Level (Exercises 9-12)

-   Function creation with parameters and return values
-   Complex data processing with multiple steps
-   Algorithm implementation
-   Integration of multiple concepts